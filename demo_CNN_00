{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/christophecudel/demo_CNN/blob/main/demo_CNN_00\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Etape 1 : organniser les données pour les rendre\n",
        "## compatibles avec l'apprentissage du CNN\n",
        "\n",
        "# Organniser les dossiers comme suit :\n",
        "# DataBase |- Train |---- Classe_0\n",
        "#          |        |---- Classe_1\n",
        "#          |-- Test |---- Classe_0\n",
        "#                   |---- Classe_1\n",
        "\n",
        "# A partir des images \"Classe_0\" et \"Classe_1\" :\n",
        "# Environ 80% des images vont dans Train\n",
        "# et 20% dans Test\n",
        "\n",
        "# Une fois le dossier correctement constitué :\n",
        "# - faire un .zip\n",
        "# - télécharger le .zip avec la ligne ci-dessous\n",
        "\n",
        "import glob\n",
        "from google.colab import files\n",
        "\n",
        "uploaded = files.upload()\n"
      ],
      "metadata": {
        "id": "SfMsphjPAank",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 38
        },
        "outputId": "4788408e-532a-44ff-ebb9-f5ea30f93da3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-7f25c33d-d0f5-4b39-93df-662bf64a3a5c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-7f25c33d-d0f5-4b39-93df-662bf64a3a5c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip DataBase_03.zip"
      ],
      "metadata": {
        "id": "gIVMc-sLSYLm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3ef00fab-71e9-43de-e04f-98603345cf7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  DataBase_03.zip\n",
            "   creating: DataBase_03/\n",
            "   creating: DataBase_03/Test/\n",
            "   creating: DataBase_03/Test/Classe_0/\n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1254.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1255.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1256.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1257.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1258.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1259.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1260.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1261.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1262.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1263.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1264.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1265.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1266.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1267.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1268.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_0/liveImage_1269.bmp  \n",
            "   creating: DataBase_03/Test/Classe_1/\n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1283.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1284.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1285.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1286.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1287.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1288.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1289.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1290.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1291.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1292.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1293.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1294.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1295.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1296.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1297.bmp  \n",
            "  inflating: DataBase_03/Test/Classe_1/liveImage_1298.bmp  \n",
            "   creating: DataBase_03/Train/\n",
            "   creating: DataBase_03/Train/Classe_0/\n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1216.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1217.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1218.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1219.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1220.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1221.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1222.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1223.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1224.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1225.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1226.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1227.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1228.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1229.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1230.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1231.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1232.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1233.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1234.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1235.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1236.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1237.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1238.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1239.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1240.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1241.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1242.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1243.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1244.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1245.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1246.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1247.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1248.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1249.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1250.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1251.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1252.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1253.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1270.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1271.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1272.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1273.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1274.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1275.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1277.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1278.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1279.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1280.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1281.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_0/liveImage_1282.bmp  \n",
            "   creating: DataBase_03/Train/Classe_1/\n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1299.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1300.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1301.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1302.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1303.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1304.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1305.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1307.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1308.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1309.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1310.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1311.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1312.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1313.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1314.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1315.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1316.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1317.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1318.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1319.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1320.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1321.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1322.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1323.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1324.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1325.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1326.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1327.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1328.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1329.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1330.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1331.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1332.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1333.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1335.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1336.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1337.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1338.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1339.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1340.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1341.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1342.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1343.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1344.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1345.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1346.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1347.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1348.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1349.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1350.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1351.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1352.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1353.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1354.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1355.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1356.bmp  \n",
            "  inflating: DataBase_03/Train/Classe_1/liveImage_1357.bmp  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "s1o8IWdoh8Bd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "caa5fc99-ede2-4624-b18f-cf24b4f7ff2e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['DataBase_03/Train/Classe_0/liveImage_1223.bmp', 'DataBase_03/Train/Classe_0/liveImage_1241.bmp', 'DataBase_03/Train/Classe_0/liveImage_1216.bmp', 'DataBase_03/Train/Classe_0/liveImage_1274.bmp', 'DataBase_03/Train/Classe_0/liveImage_1220.bmp', 'DataBase_03/Train/Classe_0/liveImage_1271.bmp', 'DataBase_03/Train/Classe_0/liveImage_1253.bmp', 'DataBase_03/Train/Classe_0/liveImage_1252.bmp', 'DataBase_03/Train/Classe_0/liveImage_1240.bmp', 'DataBase_03/Train/Classe_0/liveImage_1231.bmp', 'DataBase_03/Train/Classe_0/liveImage_1228.bmp', 'DataBase_03/Train/Classe_0/liveImage_1236.bmp', 'DataBase_03/Train/Classe_0/liveImage_1280.bmp', 'DataBase_03/Train/Classe_0/liveImage_1245.bmp', 'DataBase_03/Train/Classe_0/liveImage_1275.bmp', 'DataBase_03/Train/Classe_0/liveImage_1229.bmp', 'DataBase_03/Train/Classe_0/liveImage_1239.bmp', 'DataBase_03/Train/Classe_0/liveImage_1225.bmp', 'DataBase_03/Train/Classe_0/liveImage_1249.bmp', 'DataBase_03/Train/Classe_0/liveImage_1218.bmp', 'DataBase_03/Train/Classe_0/liveImage_1232.bmp', 'DataBase_03/Train/Classe_0/liveImage_1244.bmp', 'DataBase_03/Train/Classe_0/liveImage_1270.bmp', 'DataBase_03/Train/Classe_0/liveImage_1282.bmp', 'DataBase_03/Train/Classe_0/liveImage_1251.bmp', 'DataBase_03/Train/Classe_0/liveImage_1230.bmp', 'DataBase_03/Train/Classe_0/liveImage_1250.bmp', 'DataBase_03/Train/Classe_0/liveImage_1226.bmp', 'DataBase_03/Train/Classe_0/liveImage_1219.bmp', 'DataBase_03/Train/Classe_0/liveImage_1242.bmp', 'DataBase_03/Train/Classe_0/liveImage_1246.bmp', 'DataBase_03/Train/Classe_0/liveImage_1235.bmp', 'DataBase_03/Train/Classe_0/liveImage_1272.bmp', 'DataBase_03/Train/Classe_0/liveImage_1243.bmp', 'DataBase_03/Train/Classe_0/liveImage_1217.bmp', 'DataBase_03/Train/Classe_0/liveImage_1224.bmp', 'DataBase_03/Train/Classe_0/liveImage_1247.bmp', 'DataBase_03/Train/Classe_0/liveImage_1277.bmp', 'DataBase_03/Train/Classe_0/liveImage_1281.bmp', 'DataBase_03/Train/Classe_0/liveImage_1234.bmp', 'DataBase_03/Train/Classe_0/liveImage_1278.bmp', 'DataBase_03/Train/Classe_0/liveImage_1279.bmp', 'DataBase_03/Train/Classe_0/liveImage_1221.bmp', 'DataBase_03/Train/Classe_0/liveImage_1227.bmp', 'DataBase_03/Train/Classe_0/liveImage_1238.bmp', 'DataBase_03/Train/Classe_0/liveImage_1273.bmp', 'DataBase_03/Train/Classe_0/liveImage_1233.bmp', 'DataBase_03/Train/Classe_0/liveImage_1222.bmp', 'DataBase_03/Train/Classe_0/liveImage_1237.bmp', 'DataBase_03/Train/Classe_0/liveImage_1248.bmp']\n",
            "first and last images name :  DataBase_03/Train/Classe_0/liveImage_1223.bmp , DataBase_03/Train/Classe_0/liveImage_1248.bmp\n"
          ]
        }
      ],
      "source": [
        "# Etape 2 : préparer l'apprentissage\n",
        "# précisant bien les dossiers à prendre en compte :\n",
        "# chemins vers vos dossiers d'images d'entraînement et de test\n",
        "# depuis l'environnement google colab\n",
        "train_data_dir = \"DataBase_03/Train\" # par exemple - à ajuster\n",
        "test_data_dir = \"DataBase_03/Test\" # par exemple - à ajuster\n",
        "\n",
        "# Ici, on vérifie que l'accès aux images est OK :\n",
        "images_dir = \"DataBase_03/Train/Classe_0/*.bmp\"\n",
        "images_name = glob.glob(images_dir)\n",
        "print(images_name)\n",
        "print(\"first and last images name : \",images_name[0],\",\", images_name[-1])\n",
        "\n",
        "# Si l'instruction ne retourne pas les noms de fichier\n",
        "# de la 1ère et dernière image : revoir les étapes précédentes\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Etape 3 :On affiche les dimensions des images\n",
        "from PIL import Image\n",
        "\n",
        "# Ouvrir l'image PNG\n",
        "image = Image.open(images_name[0])\n",
        "\n",
        "# Obtenir les dimensions de l'image\n",
        "NbCols, NbRows = image.size\n",
        "\n",
        "if image.mode == 'RGB':\n",
        "    NbCanaux = 3\n",
        "elif image.mode == 'L':\n",
        "    NbCanaux = 1\n",
        "else:\n",
        "    NbCanaux = 'Inconnu'  # Pour d'autres modes, la gestion peut être ajoutée selon les besoins\n",
        "\n",
        "# Afficher les informations\n",
        "print(f'Nombre de colonnes (largeur): {NbCols}, Nombre de lignes (hauteur): {NbRows}, Nombre de canaux: {NbCanaux}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rkOgA-baOfOY",
        "outputId": "73c2de07-e904-4034-8f9d-ce5111727b1e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nombre de colonnes (largeur): 128, Nombre de lignes (hauteur): 128, Nombre de canaux: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4uJB6qrMZcus",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "77bab481-92f8-463e-9b79-8192cc804e88"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 107 images belonging to 2 classes.\n",
            "Found 32 images belonging to 2 classes.\n",
            "Epoch 1/100\n",
            "4/4 [==============================] - 2s 134ms/step - loss: 0.6997 - accuracy: 0.5607 - val_loss: 0.6906 - val_accuracy: 0.5000\n",
            "Epoch 2/100\n",
            "4/4 [==============================] - 1s 165ms/step - loss: 0.7065 - accuracy: 0.4673 - val_loss: 0.6557 - val_accuracy: 0.5000\n",
            "Epoch 3/100\n",
            "4/4 [==============================] - 1s 162ms/step - loss: 0.6633 - accuracy: 0.4953 - val_loss: 0.6409 - val_accuracy: 0.5000\n",
            "Epoch 4/100\n",
            "4/4 [==============================] - 1s 121ms/step - loss: 0.6510 - accuracy: 0.5140 - val_loss: 0.6298 - val_accuracy: 0.5000\n",
            "Epoch 5/100\n",
            "4/4 [==============================] - 1s 155ms/step - loss: 0.6226 - accuracy: 0.6075 - val_loss: 0.5475 - val_accuracy: 0.7500\n",
            "Epoch 6/100\n",
            "4/4 [==============================] - 1s 133ms/step - loss: 0.5774 - accuracy: 0.7757 - val_loss: 0.4232 - val_accuracy: 1.0000\n",
            "Epoch 7/100\n",
            "4/4 [==============================] - 1s 124ms/step - loss: 0.5042 - accuracy: 0.8411 - val_loss: 0.4124 - val_accuracy: 0.6250\n",
            "Epoch 8/100\n",
            "4/4 [==============================] - 1s 121ms/step - loss: 0.3946 - accuracy: 0.8598 - val_loss: 0.2124 - val_accuracy: 1.0000\n",
            "Epoch 9/100\n",
            "4/4 [==============================] - 1s 135ms/step - loss: 0.2288 - accuracy: 0.9439 - val_loss: 0.0957 - val_accuracy: 1.0000\n",
            "Epoch 10/100\n",
            "4/4 [==============================] - 1s 128ms/step - loss: 0.1363 - accuracy: 0.9813 - val_loss: 0.1279 - val_accuracy: 0.9375\n",
            "Epoch 11/100\n",
            "4/4 [==============================] - 1s 209ms/step - loss: 0.1027 - accuracy: 0.9813 - val_loss: 0.1128 - val_accuracy: 1.0000\n",
            "Epoch 12/100\n",
            "4/4 [==============================] - 1s 283ms/step - loss: 0.0692 - accuracy: 0.9720 - val_loss: 0.0154 - val_accuracy: 1.0000\n",
            "Epoch 13/100\n",
            "4/4 [==============================] - 1s 160ms/step - loss: 0.0749 - accuracy: 0.9813 - val_loss: 0.2033 - val_accuracy: 0.8438\n",
            "Epoch 14/100\n",
            "4/4 [==============================] - 1s 162ms/step - loss: 0.0187 - accuracy: 1.0000 - val_loss: 0.0025 - val_accuracy: 1.0000\n",
            "Epoch 15/100\n",
            "4/4 [==============================] - 1s 129ms/step - loss: 0.0141 - accuracy: 1.0000 - val_loss: 0.0150 - val_accuracy: 1.0000\n",
            "Epoch 16/100\n",
            "4/4 [==============================] - 1s 122ms/step - loss: 0.0383 - accuracy: 0.9907 - val_loss: 0.2147 - val_accuracy: 0.8750\n",
            "Epoch 17/100\n",
            "4/4 [==============================] - 1s 127ms/step - loss: 0.0082 - accuracy: 1.0000 - val_loss: 0.0010 - val_accuracy: 1.0000\n",
            "Epoch 18/100\n",
            "4/4 [==============================] - 1s 137ms/step - loss: 0.0138 - accuracy: 1.0000 - val_loss: 0.0355 - val_accuracy: 1.0000\n",
            "Epoch 19/100\n",
            "4/4 [==============================] - 1s 127ms/step - loss: 0.0050 - accuracy: 1.0000 - val_loss: 0.3956 - val_accuracy: 0.8750\n",
            "Epoch 20/100\n",
            "4/4 [==============================] - 1s 124ms/step - loss: 0.0092 - accuracy: 1.0000 - val_loss: 0.0096 - val_accuracy: 1.0000\n",
            "Epoch 21/100\n",
            "4/4 [==============================] - 1s 164ms/step - loss: 0.0033 - accuracy: 1.0000 - val_loss: 6.8500e-04 - val_accuracy: 1.0000\n",
            "Epoch 22/100\n",
            "4/4 [==============================] - 1s 133ms/step - loss: 0.0014 - accuracy: 1.0000 - val_loss: 0.0011 - val_accuracy: 1.0000\n",
            "Epoch 23/100\n",
            "4/4 [==============================] - 1s 176ms/step - loss: 3.9343e-04 - accuracy: 1.0000 - val_loss: 0.0036 - val_accuracy: 1.0000\n",
            "Epoch 24/100\n",
            "4/4 [==============================] - 1s 143ms/step - loss: 5.8582e-04 - accuracy: 1.0000 - val_loss: 0.0116 - val_accuracy: 1.0000\n",
            "Epoch 25/100\n",
            "4/4 [==============================] - 1s 137ms/step - loss: 2.1695e-04 - accuracy: 1.0000 - val_loss: 0.0297 - val_accuracy: 1.0000\n",
            "Epoch 26/100\n",
            "4/4 [==============================] - 1s 135ms/step - loss: 3.7535e-04 - accuracy: 1.0000 - val_loss: 0.0414 - val_accuracy: 1.0000\n",
            "Epoch 27/100\n",
            "4/4 [==============================] - 1s 125ms/step - loss: 3.4417e-04 - accuracy: 1.0000 - val_loss: 0.0358 - val_accuracy: 1.0000\n",
            "Epoch 28/100\n",
            "4/4 [==============================] - 1s 129ms/step - loss: 2.9824e-04 - accuracy: 1.0000 - val_loss: 0.0224 - val_accuracy: 1.0000\n",
            "Epoch 29/100\n",
            "4/4 [==============================] - 1s 171ms/step - loss: 2.0374e-04 - accuracy: 1.0000 - val_loss: 0.0128 - val_accuracy: 1.0000\n",
            "Epoch 30/100\n",
            "4/4 [==============================] - 1s 219ms/step - loss: 1.3619e-04 - accuracy: 1.0000 - val_loss: 0.0077 - val_accuracy: 1.0000\n",
            "Epoch 31/100\n",
            "4/4 [==============================] - 1s 215ms/step - loss: 3.2964e-04 - accuracy: 1.0000 - val_loss: 0.0057 - val_accuracy: 1.0000\n",
            "Epoch 32/100\n",
            "4/4 [==============================] - 1s 171ms/step - loss: 1.1442e-04 - accuracy: 1.0000 - val_loss: 0.0049 - val_accuracy: 1.0000\n",
            "Epoch 33/100\n",
            "4/4 [==============================] - 1s 126ms/step - loss: 9.7797e-05 - accuracy: 1.0000 - val_loss: 0.0047 - val_accuracy: 1.0000\n",
            "Epoch 34/100\n",
            "4/4 [==============================] - 1s 137ms/step - loss: 1.3635e-04 - accuracy: 1.0000 - val_loss: 0.0045 - val_accuracy: 1.0000\n",
            "Epoch 35/100\n",
            "4/4 [==============================] - 1s 129ms/step - loss: 1.2395e-04 - accuracy: 1.0000 - val_loss: 0.0041 - val_accuracy: 1.0000\n",
            "Epoch 36/100\n",
            "4/4 [==============================] - 1s 143ms/step - loss: 4.5924e-04 - accuracy: 1.0000 - val_loss: 0.0060 - val_accuracy: 1.0000\n",
            "Epoch 37/100\n",
            "4/4 [==============================] - 1s 130ms/step - loss: 8.9601e-05 - accuracy: 1.0000 - val_loss: 0.0085 - val_accuracy: 1.0000\n",
            "Epoch 38/100\n",
            "4/4 [==============================] - 1s 121ms/step - loss: 1.6864e-04 - accuracy: 1.0000 - val_loss: 0.0106 - val_accuracy: 1.0000\n",
            "Epoch 39/100\n",
            "4/4 [==============================] - 1s 126ms/step - loss: 1.0497e-04 - accuracy: 1.0000 - val_loss: 0.0116 - val_accuracy: 1.0000\n",
            "Epoch 40/100\n",
            "4/4 [==============================] - 1s 171ms/step - loss: 1.2588e-04 - accuracy: 1.0000 - val_loss: 0.0095 - val_accuracy: 1.0000\n",
            "Epoch 41/100\n",
            "4/4 [==============================] - 1s 161ms/step - loss: 9.0247e-04 - accuracy: 1.0000 - val_loss: 0.0110 - val_accuracy: 1.0000\n",
            "Epoch 42/100\n",
            "4/4 [==============================] - 1s 126ms/step - loss: 1.8627e-04 - accuracy: 1.0000 - val_loss: 0.0310 - val_accuracy: 1.0000\n",
            "Epoch 43/100\n",
            "4/4 [==============================] - 1s 129ms/step - loss: 2.5934e-04 - accuracy: 1.0000 - val_loss: 0.0470 - val_accuracy: 1.0000\n",
            "Epoch 44/100\n",
            "4/4 [==============================] - 1s 152ms/step - loss: 3.3833e-04 - accuracy: 1.0000 - val_loss: 0.0338 - val_accuracy: 1.0000\n",
            "Epoch 45/100\n",
            "4/4 [==============================] - 1s 129ms/step - loss: 1.7880e-04 - accuracy: 1.0000 - val_loss: 0.0182 - val_accuracy: 1.0000\n",
            "Epoch 46/100\n",
            "4/4 [==============================] - 1s 161ms/step - loss: 1.2328e-04 - accuracy: 1.0000 - val_loss: 0.0092 - val_accuracy: 1.0000\n",
            "Epoch 47/100\n",
            "4/4 [==============================] - 1s 128ms/step - loss: 0.0028 - accuracy: 1.0000 - val_loss: 0.0176 - val_accuracy: 1.0000\n",
            "Epoch 48/100\n",
            "4/4 [==============================] - 1s 259ms/step - loss: 0.0016 - accuracy: 1.0000 - val_loss: 0.1425 - val_accuracy: 0.8750\n",
            "Epoch 49/100\n",
            "4/4 [==============================] - 1s 253ms/step - loss: 7.1520e-04 - accuracy: 1.0000 - val_loss: 0.0512 - val_accuracy: 1.0000\n",
            "Epoch 50/100\n",
            "4/4 [==============================] - 1s 125ms/step - loss: 2.9176e-04 - accuracy: 1.0000 - val_loss: 0.0097 - val_accuracy: 1.0000\n",
            "Epoch 51/100\n",
            "4/4 [==============================] - 1s 133ms/step - loss: 1.0191e-04 - accuracy: 1.0000 - val_loss: 0.0024 - val_accuracy: 1.0000\n",
            "Epoch 52/100\n",
            "4/4 [==============================] - 1s 138ms/step - loss: 3.8961e-04 - accuracy: 1.0000 - val_loss: 0.0015 - val_accuracy: 1.0000\n",
            "Epoch 53/100\n",
            "4/4 [==============================] - 1s 125ms/step - loss: 6.6228e-05 - accuracy: 1.0000 - val_loss: 0.0012 - val_accuracy: 1.0000\n",
            "Epoch 54/100\n",
            "4/4 [==============================] - 1s 127ms/step - loss: 2.9393e-04 - accuracy: 1.0000 - val_loss: 0.0015 - val_accuracy: 1.0000\n",
            "Epoch 55/100\n",
            "4/4 [==============================] - 1s 162ms/step - loss: 7.3142e-05 - accuracy: 1.0000 - val_loss: 0.0022 - val_accuracy: 1.0000\n",
            "Epoch 56/100\n",
            "4/4 [==============================] - 1s 166ms/step - loss: 2.1862e-04 - accuracy: 1.0000 - val_loss: 0.0034 - val_accuracy: 1.0000\n",
            "Epoch 57/100\n",
            "4/4 [==============================] - 1s 167ms/step - loss: 5.3363e-05 - accuracy: 1.0000 - val_loss: 0.0044 - val_accuracy: 1.0000\n",
            "Epoch 58/100\n",
            "4/4 [==============================] - 1s 133ms/step - loss: 9.3766e-05 - accuracy: 1.0000 - val_loss: 0.0051 - val_accuracy: 1.0000\n",
            "Epoch 59/100\n",
            "4/4 [==============================] - 1s 171ms/step - loss: 7.2005e-04 - accuracy: 1.0000 - val_loss: 0.0095 - val_accuracy: 1.0000\n",
            "Epoch 60/100\n",
            "4/4 [==============================] - 1s 133ms/step - loss: 0.0122 - accuracy: 1.0000 - val_loss: 0.0889 - val_accuracy: 1.0000\n",
            "Epoch 61/100\n",
            "4/4 [==============================] - 1s 139ms/step - loss: 5.2762e-04 - accuracy: 1.0000 - val_loss: 0.0014 - val_accuracy: 1.0000\n",
            "Epoch 62/100\n",
            "4/4 [==============================] - 1s 130ms/step - loss: 5.5967e-04 - accuracy: 1.0000 - val_loss: 2.2650e-04 - val_accuracy: 1.0000\n",
            "Epoch 63/100\n",
            "4/4 [==============================] - 1s 125ms/step - loss: 0.0013 - accuracy: 1.0000 - val_loss: 7.4530e-04 - val_accuracy: 1.0000\n",
            "Epoch 64/100\n",
            "4/4 [==============================] - 1s 134ms/step - loss: 7.2805e-04 - accuracy: 1.0000 - val_loss: 0.0052 - val_accuracy: 1.0000\n",
            "Epoch 65/100\n",
            "4/4 [==============================] - 1s 157ms/step - loss: 2.8301e-04 - accuracy: 1.0000 - val_loss: 0.0110 - val_accuracy: 1.0000\n",
            "Epoch 66/100\n",
            "4/4 [==============================] - 1s 128ms/step - loss: 0.0013 - accuracy: 1.0000 - val_loss: 0.0044 - val_accuracy: 1.0000\n",
            "Epoch 67/100\n",
            "4/4 [==============================] - 1s 224ms/step - loss: 7.6883e-04 - accuracy: 1.0000 - val_loss: 4.3260e-04 - val_accuracy: 1.0000\n",
            "Epoch 68/100\n",
            "4/4 [==============================] - 1s 282ms/step - loss: 6.8495e-04 - accuracy: 1.0000 - val_loss: 2.2959e-04 - val_accuracy: 1.0000\n",
            "Epoch 69/100\n",
            "4/4 [==============================] - 1s 191ms/step - loss: 3.2791e-04 - accuracy: 1.0000 - val_loss: 5.2493e-04 - val_accuracy: 1.0000\n",
            "Epoch 70/100\n",
            "4/4 [==============================] - 1s 163ms/step - loss: 7.5156e-05 - accuracy: 1.0000 - val_loss: 0.0013 - val_accuracy: 1.0000\n",
            "Epoch 71/100\n",
            "4/4 [==============================] - 1s 124ms/step - loss: 7.9351e-05 - accuracy: 1.0000 - val_loss: 0.0026 - val_accuracy: 1.0000\n",
            "Epoch 72/100\n",
            "4/4 [==============================] - 1s 162ms/step - loss: 5.3064e-05 - accuracy: 1.0000 - val_loss: 0.0041 - val_accuracy: 1.0000\n",
            "Epoch 73/100\n",
            "4/4 [==============================] - 1s 135ms/step - loss: 1.4870e-04 - accuracy: 1.0000 - val_loss: 0.0047 - val_accuracy: 1.0000\n",
            "Epoch 74/100\n",
            "4/4 [==============================] - 1s 126ms/step - loss: 8.8371e-05 - accuracy: 1.0000 - val_loss: 0.0043 - val_accuracy: 1.0000\n",
            "Epoch 75/100\n",
            "4/4 [==============================] - 1s 128ms/step - loss: 6.2819e-05 - accuracy: 1.0000 - val_loss: 0.0037 - val_accuracy: 1.0000\n",
            "Epoch 76/100\n",
            "4/4 [==============================] - 1s 124ms/step - loss: 8.1942e-05 - accuracy: 1.0000 - val_loss: 0.0029 - val_accuracy: 1.0000\n",
            "Epoch 77/100\n",
            "4/4 [==============================] - 1s 159ms/step - loss: 4.7117e-05 - accuracy: 1.0000 - val_loss: 0.0023 - val_accuracy: 1.0000\n",
            "Epoch 78/100\n",
            "4/4 [==============================] - 1s 136ms/step - loss: 5.5220e-05 - accuracy: 1.0000 - val_loss: 0.0018 - val_accuracy: 1.0000\n",
            "Epoch 79/100\n",
            "4/4 [==============================] - 1s 159ms/step - loss: 1.0632e-04 - accuracy: 1.0000 - val_loss: 0.0012 - val_accuracy: 1.0000\n",
            "Epoch 80/100\n",
            "4/4 [==============================] - 1s 126ms/step - loss: 3.8824e-05 - accuracy: 1.0000 - val_loss: 8.7262e-04 - val_accuracy: 1.0000\n",
            "Epoch 81/100\n",
            "4/4 [==============================] - 1s 121ms/step - loss: 4.6172e-05 - accuracy: 1.0000 - val_loss: 7.3969e-04 - val_accuracy: 1.0000\n",
            "Epoch 82/100\n",
            "4/4 [==============================] - 1s 164ms/step - loss: 6.9117e-05 - accuracy: 1.0000 - val_loss: 6.5213e-04 - val_accuracy: 1.0000\n",
            "Epoch 83/100\n",
            "4/4 [==============================] - 1s 128ms/step - loss: 8.1328e-05 - accuracy: 1.0000 - val_loss: 6.2649e-04 - val_accuracy: 1.0000\n",
            "Epoch 84/100\n",
            "4/4 [==============================] - 1s 129ms/step - loss: 5.5622e-05 - accuracy: 1.0000 - val_loss: 6.2413e-04 - val_accuracy: 1.0000\n",
            "Epoch 85/100\n",
            "4/4 [==============================] - 1s 136ms/step - loss: 4.4069e-05 - accuracy: 1.0000 - val_loss: 6.9973e-04 - val_accuracy: 1.0000\n",
            "Epoch 86/100\n",
            "4/4 [==============================] - 1s 189ms/step - loss: 1.4608e-04 - accuracy: 1.0000 - val_loss: 9.5181e-04 - val_accuracy: 1.0000\n",
            "Epoch 87/100\n",
            "4/4 [==============================] - 1s 217ms/step - loss: 2.1950e-04 - accuracy: 1.0000 - val_loss: 9.1671e-04 - val_accuracy: 1.0000\n",
            "Epoch 88/100\n",
            "4/4 [==============================] - 1s 125ms/step - loss: 2.5464e-05 - accuracy: 1.0000 - val_loss: 7.5631e-04 - val_accuracy: 1.0000\n",
            "Epoch 89/100\n",
            "4/4 [==============================] - 1s 157ms/step - loss: 4.4094e-05 - accuracy: 1.0000 - val_loss: 6.9054e-04 - val_accuracy: 1.0000\n",
            "Epoch 90/100\n",
            "4/4 [==============================] - 1s 129ms/step - loss: 3.5128e-05 - accuracy: 1.0000 - val_loss: 6.8325e-04 - val_accuracy: 1.0000\n",
            "Epoch 91/100\n",
            "4/4 [==============================] - 1s 130ms/step - loss: 3.8254e-05 - accuracy: 1.0000 - val_loss: 7.2283e-04 - val_accuracy: 1.0000\n",
            "Epoch 92/100\n",
            "4/4 [==============================] - 1s 124ms/step - loss: 5.4672e-05 - accuracy: 1.0000 - val_loss: 7.9709e-04 - val_accuracy: 1.0000\n",
            "Epoch 93/100\n",
            "4/4 [==============================] - 1s 133ms/step - loss: 2.4188e-05 - accuracy: 1.0000 - val_loss: 8.6501e-04 - val_accuracy: 1.0000\n",
            "Epoch 94/100\n",
            "4/4 [==============================] - 1s 136ms/step - loss: 2.2917e-05 - accuracy: 1.0000 - val_loss: 9.1327e-04 - val_accuracy: 1.0000\n",
            "Epoch 95/100\n",
            "4/4 [==============================] - 1s 127ms/step - loss: 2.5423e-05 - accuracy: 1.0000 - val_loss: 9.6842e-04 - val_accuracy: 1.0000\n",
            "Epoch 96/100\n",
            "4/4 [==============================] - 1s 127ms/step - loss: 2.9524e-05 - accuracy: 1.0000 - val_loss: 9.9653e-04 - val_accuracy: 1.0000\n",
            "Epoch 97/100\n",
            "4/4 [==============================] - 1s 128ms/step - loss: 4.5249e-04 - accuracy: 1.0000 - val_loss: 0.0030 - val_accuracy: 1.0000\n",
            "Epoch 98/100\n",
            "4/4 [==============================] - 1s 133ms/step - loss: 1.1518e-04 - accuracy: 1.0000 - val_loss: 0.0075 - val_accuracy: 1.0000\n",
            "Epoch 99/100\n",
            "4/4 [==============================] - 1s 167ms/step - loss: 1.6745e-04 - accuracy: 1.0000 - val_loss: 0.0092 - val_accuracy: 1.0000\n",
            "Epoch 100/100\n",
            "4/4 [==============================] - 1s 128ms/step - loss: 8.6226e-05 - accuracy: 1.0000 - val_loss: 0.0068 - val_accuracy: 1.0000\n",
            "1/1 [==============================] - 0s 56ms/step - loss: 0.0068 - accuracy: 1.0000\n",
            "Accuracy on test set: 1.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Etape 4 : apprentissage\n",
        "# Préparation des paramètres pour la\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "# Créez des générateurs de données distincts pour chaque classe d'entraînement\n",
        "image_size = (NbRows, NbCols)\n",
        "batch_size = 32\n",
        "\n",
        "train_datagen = ImageDataGenerator(\n",
        "    rescale=1.0 / 255,\n",
        "    rotation_range=20,\n",
        "    width_shift_range=0.2,\n",
        "    height_shift_range=0.2,\n",
        "    shear_range=0.2,\n",
        "    zoom_range=0.2,\n",
        "    horizontal_flip=True,\n",
        "    fill_mode='nearest'\n",
        ")\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "    train_data_dir,\n",
        "    target_size=image_size,\n",
        "    batch_size=batch_size,\n",
        "    class_mode='binary',  # Deux classes : classe_0 et classe_1\n",
        "    shuffle=True\n",
        ")\n",
        "\n",
        "# S'il y a plus de classes, il ne faut plus être en \"class_mode\".\n",
        "# Fusionnez les générateurs de données en un seul pour l'entraînement en utilisant numpy\n",
        "#train_generator = np.concatenate([train_generator_classe_0, train_generator_classe_1])\n",
        "\n",
        "# Créez un générateur de données pour charger et prétraiter les images de test\n",
        "test_datagen = ImageDataGenerator(rescale=1.0 / 255)\n",
        "\n",
        "test_generator = test_datagen.flow_from_directory(\n",
        "    test_data_dir,\n",
        "    target_size=image_size,\n",
        "    batch_size=batch_size,\n",
        "    class_mode='binary',  # Deux classes : classe_0 et classe_1\n",
        "    shuffle=False  # Vous pouvez désactiver le mélange pour garder l'ordre\n",
        ")\n",
        "\n",
        "# Créez un modèle CNN\n",
        "model = keras.Sequential([\n",
        "    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(NbRows, NbCols, 3)),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "    layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "    layers.Conv2D(128, (3, 3), activation='relu'),\n",
        "    layers.MaxPooling2D((2, 2)),\n",
        "    layers.Flatten(),\n",
        "    layers.Dense(128, activation='relu'),\n",
        "    layers.Dense(1, activation='sigmoid')  # Deux classes : classe_0 et classe_1 (décision binaire)\n",
        "])\n",
        "\n",
        "# Compiler le modèle\n",
        "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Entraîner le modèle\n",
        "num_epochs = 100\n",
        "\n",
        "history = model.fit(train_generator, epochs=num_epochs, validation_data=test_generator)\n",
        "\n",
        "# Évaluer le modèle sur l'ensemble de test\n",
        "test_loss, test_acc = model.evaluate(test_generator)\n",
        "print(f'Accuracy on test set: {test_acc}')\n",
        "\n",
        "# Sauvegarder le modèle si nécessaire\n",
        "# ces lignes demandent une durée d'excécution non négligeables\n",
        "# elles sont nécessaires si on excecute le \"model\" de CNN dans un autre code\n",
        "# il faut alors re-charger le \"model\" de CNN\n",
        "# chaine = f\"content/Classif_keras_{num_epochs:02d}_epochs\"\n",
        "# model.save(chaine)\n",
        "\n",
        "# Afficher les courbes de loss et d'accuracy\n",
        "plt.figure(figsize=(12, 4))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.legend()\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oX1Jjeq5-3Sp"
      },
      "outputs": [],
      "source": [
        "# Etape facultative\n",
        "# Uniquement si le \"model\" est excuté dans un autre notebook jupyter\n",
        "# ou bien dans un autre contexte\n",
        "# étape très longue\n",
        "\n",
        "import zipfile\n",
        "import os\n",
        "\n",
        "# Sauvegarder le modèle (CNN) si nécessaire\n",
        "dossier = f\"/models/Classif_keras_{num_epochs:02d}_epochs\"\n",
        "print(\"Dossier du modèle à télécharger :\" + dossier)\n",
        "model.save(dossier)\n",
        "\n",
        "# Créer un fichier ZIP\n",
        "mon_dossier_zip = dossier + \".zip\"\n",
        "# Créer un fichier ZIP\n",
        "with zipfile.ZipFile(mon_dossier_zip, 'w', zipfile.ZIP_DEFLATED) as zipf:\n",
        "    for root, dirs, fichiers in os.walk(dossier):\n",
        "        for fichier in fichiers:\n",
        "            chemin_complet = os.path.join(root, fichier)\n",
        "            nom_dans_zip = os.path.relpath(chemin_complet, os.path.dirname(dossier))\n",
        "            zipf.write(chemin_complet, nom_dans_zip)\n",
        "\n",
        "        # Ajouter également les dossiers vides\n",
        "        if not fichiers:\n",
        "            nom_dossier_vide = os.path.relpath(root, os.path.dirname(dossier)) + '/'\n",
        "            zipf.write(root, nom_dossier_vide)\n",
        "\n",
        "# Télécharger le fichier ZIP\n",
        "files.download(mon_dossier_zip)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Etape : préparation pour visualiser le résultat de l'apprentissage\n",
        "# Les images ne doivent pas être celles utilisées pour l'apprentissage\n",
        "# donc prendre les images de test en préparant un fichier zip\n",
        "# le mieux est de mélanger des images de classe_0 et de classe_1 dans un même dossier\n",
        "uploaded = files.upload()\n",
        "#\n",
        "!unzip images_test.zip #changer le nom du fichier"
      ],
      "metadata": {
        "id": "3-SRY1hMJLOW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yHW_oknRNoys",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "01ab408d-49bf-4d10-ccf6-2314abd1322c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 18ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 16ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            "1/1 [==============================] - 0s 19ms/step\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 18ms/step\n"
          ]
        }
      ],
      "source": [
        "#Etape 5 : le modèle est testé sur des images\n",
        "\n",
        "from tensorflow.keras.preprocessing import image\n",
        "import os\n",
        "\n",
        "# Spécifiez le chemin du dossier contenant les images à prédire\n",
        "images_directory = \"DataBase_03/Test/Classe_1\"\n",
        "\n",
        "#NbRows, NbCols = 128\n",
        "Count_classe_0, Count_classe_1 = 0,0\n",
        "\n",
        "# Créez une liste pour stocker les images et les prédictions\n",
        "images = []\n",
        "predictions = []\n",
        "\n",
        "# Parcourez les fichiers d'images dans le dossier\n",
        "for filename in os.listdir(images_directory):\n",
        "    if filename.endswith('.bmp'):\n",
        "        # Charger l'image pour la prédiction\n",
        "        image_path = os.path.join(images_directory, filename)\n",
        "        img = image.load_img(image_path, target_size=(NbRows, NbCols))\n",
        "        img_array = image.img_to_array(img)\n",
        "        img_array = np.expand_dims(img_array, axis=0)\n",
        "        img_array /= 255.0  # Assurez-vous de normaliser l'image comme pendant l'entraînement\n",
        "\n",
        "       # Faire la prédiction\n",
        "        pred = model.predict(img_array)\n",
        "        predictions.append(pred[0][0])\n",
        "\n",
        "        # Stocker l'imagen sous forme d'un tableau\n",
        "        images.append(img)\n",
        "\n",
        "        # Afficher les images dans une seule figure avec une barre de défilement\n",
        "        num_images = len(images)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# si ipywidget n'est pas installé :\n",
        "# outil utilisé pour la visualisation ensuite\n",
        "!pip install ipywidgets"
      ],
      "metadata": {
        "id": "ojG7lzwKW3rn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "451a0271-538d-4df9-f262-49f31d84c5df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: ipywidgets in /usr/local/lib/python3.10/dist-packages (7.7.1)\n",
            "Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets) (5.5.6)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets) (0.2.0)\n",
            "Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets) (5.7.1)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets) (3.6.6)\n",
            "Requirement already satisfied: ipython>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets) (7.34.0)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets) (3.0.10)\n",
            "Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets) (6.1.12)\n",
            "Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets) (6.3.3)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets) (67.7.2)\n",
            "Collecting jedi>=0.16 (from ipython>=4.0.0->ipywidgets)\n",
            "  Downloading jedi-0.19.1-py2.py3-none-any.whl (1.6 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m13.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets) (0.7.5)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets) (3.0.43)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets) (2.16.1)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets) (0.2.0)\n",
            "Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets) (0.1.6)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets) (4.9.0)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets) (6.5.5)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=4.0.0->ipywidgets) (0.8.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.1.3)\n",
            "Requirement already satisfied: pyzmq<25,>=17 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (23.2.1)\n",
            "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (23.1.0)\n",
            "Requirement already satisfied: jupyter-core>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (5.7.2)\n",
            "Requirement already satisfied: nbformat in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (5.10.3)\n",
            "Requirement already satisfied: nbconvert>=5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (6.5.4)\n",
            "Requirement already satisfied: nest-asyncio>=1.5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.6.0)\n",
            "Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.8.2)\n",
            "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.18.1)\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.20.0)\n",
            "Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.0.0)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.10/dist-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets) (2.8.2)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=4.0.0->ipywidgets) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=4.0.0->ipywidgets) (0.2.13)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core>=4.6.1->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.2.0)\n",
            "Requirement already satisfied: jupyter-server>=1.8 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.24.0)\n",
            "Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.2.4)\n",
            "Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.9.4)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.12.3)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (6.1.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.7.1)\n",
            "Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.4)\n",
            "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.3.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.1.5)\n",
            "Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.8.4)\n",
            "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.10.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (24.0)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.5.1)\n",
            "Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.2.1)\n",
            "Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.10/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.19.1)\n",
            "Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.19.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.1->jupyter-client->ipykernel>=4.5.1->ipywidgets) (1.16.0)\n",
            "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (21.2.0)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (23.2.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2023.12.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.34.0)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.18.0)\n",
            "Requirement already satisfied: anyio<4,>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.7.1)\n",
            "Requirement already satisfied: websocket-client in /usr/local/lib/python3.10/dist-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.7.0)\n",
            "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.16.0)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.5)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.5.1)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.6)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.3.1)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.2.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.21)\n",
            "Installing collected packages: jedi\n",
            "Successfully installed jedi-0.19.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LaP57ShNe6Hm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jVNPVzFUKBoI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476,
          "referenced_widgets": [
            "8cfc68d8cdcc4ad8abc4c2aa52689cc8",
            "58194863d8e94f508660ec852f2f1a1b",
            "e39a8bc3207a4d02917abf48030ba883",
            "12cd5a21448844b0ac1a911c872510d5",
            "5a9a43ab226c4d648b59d83d46dc7861"
          ]
        },
        "outputId": "6c2e89f7-2791-4c81-dcf9-32c82fe098e5"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "IntSlider(value=0, description='Image Index:', max=15)"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8cfc68d8cdcc4ad8abc4c2aa52689cc8"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Output()"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "12cd5a21448844b0ac1a911c872510d5"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Etape 6 : visualisation des résultats sur les images de test\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, clear_output\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Supposons que vous avez une liste d'images et une liste de noms correspondants\n",
        "#images = [img1, img2, img3, ...]  # Remplacez ceci par vos images\n",
        "\n",
        "image_names = os.listdir(images_directory)\n",
        "\n",
        "# Créer un widget Output pour l'affichage des images\n",
        "output = widgets.Output()\n",
        "\n",
        "# Créer un slider\n",
        "slider = widgets.IntSlider(min=0, max=len(images) - 1, step=1, description='Image Index:')\n",
        "\n",
        "# Fonction pour mettre à jour l'image et le nom\n",
        "def update_image(change):\n",
        "    img_index = change['new']  # Utilisation de change['new'] au lieu de change.new\n",
        "    with output:\n",
        "        clear_output(wait=True)  # Effacer l'affichage précédent\n",
        "        plt.figure(figsize=(5,5))  # Ajustez la taille si nécessaire\n",
        "        plt.imshow(images[img_index])  # Afficher la nouvelle image\n",
        "        #plt.title(image_names[img_index])  # Afficher le nom de l'image\n",
        "        plt.axis('off')\n",
        "        if predictions[img_index]>0.5:\n",
        "          classe = 'Classe 1'\n",
        "        else:\n",
        "          classe = 'Classe 0'\n",
        "        plt.title(image_names[img_index] + ':'+classe,fontsize=12)\n",
        "        plt.show()\n",
        "\n",
        "# Observer les changements du slider\n",
        "slider.observe(update_image, names='value')\n",
        "\n",
        "# Afficher le slider et la zone d'affichage\n",
        "display(slider)\n",
        "display(output)\n",
        "\n",
        "# Affichage initial\n",
        "update_image({'new': slider.value})"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.18"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "8cfc68d8cdcc4ad8abc4c2aa52689cc8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntSliderModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntSliderModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntSliderView",
            "continuous_update": true,
            "description": "Image Index:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_58194863d8e94f508660ec852f2f1a1b",
            "max": 15,
            "min": 0,
            "orientation": "horizontal",
            "readout": true,
            "readout_format": "d",
            "step": 1,
            "style": "IPY_MODEL_e39a8bc3207a4d02917abf48030ba883",
            "value": 5
          }
        },
        "58194863d8e94f508660ec852f2f1a1b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e39a8bc3207a4d02917abf48030ba883": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SliderStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "",
            "handle_color": null
          }
        },
        "12cd5a21448844b0ac1a911c872510d5": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_5a9a43ab226c4d648b59d83d46dc7861",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<Figure size 500x500 with 1 Axes>",
                  "image/png": "\n"
                },
                "metadata": {}
              }
            ]
          }
        },
        "5a9a43ab226c4d648b59d83d46dc7861": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}